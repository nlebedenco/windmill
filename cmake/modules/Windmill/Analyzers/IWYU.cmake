include_guard(DIRECTORY)
message(STATUS "Including ${CMAKE_CURRENT_LIST_FILE}")

if (WINDMILL_ENABLE_IWYU)
    set(WINDMILL_IWYU_WRAPPER_CONFIG_FILE "${WINDMILL_SOURCE_DIR}/extras/iwyu/iwyu.yml")

    set(WINDMILL_IWYU_MAPPING_FILE "${WINDMILL_SOURCE_DIR}/extras/iwyu/mappings/${CMAKE_SYSTEM_NAME}.imp")

    # Feature tools should be required because the user can explicitly disable it using command line options.
    # Using find_package here instead of find_program to invoke our custom find module which can automatically check
    # the minimum version specified in the package declaration (if any).
    find_package(IWYU REQUIRED)

    # IWYU needs the --driver-mode=cl argument to understand MSVC options from CMake but this is taken care of by CMake
    # when the command  is invoked.
    #
    # IWYU only understands Clang arguments (besides its own arguments) so when we are using a compiler other than Clang
    # chances are there will be one or more unrecognized compiler arguments which IWYU will classify as a
    # clang-diagnostic-error (i.e. a compiler error). There is no way to solve this using command-line arguments alone.
    # Clang has made unknown arguments a hard error some time ago and it cannot be degraded to a warning. It is also
    # impossible to cherry-pick compiler arguments passed to IWYU by CMake unless we give up on the CMake integration
    # completely (i.e. CMAKE_<LANG>_INCLUDE_WHAT_YOU_USE) and implement our own custom command. This approach has many
    # drawbacks including the fact that we would have to pass a compilation database (i.e. compile_commands.json)
    # generated by CMake which still needs to be adjusted because it will contain the same unknown arguments. And on top
    # of that, IWYU would run for all sources every time instead of only for what was being compiled. So instead of
    # using a custom command we use our own wrapper with CMAKE_<LANG>_INCLUDE_WHAT_YOU_USE so that can remove
    # unrecognized arguments before invoking IWYU and relay stdout/stderr.
    #
    # See https://stackoverflow.com/a/60233807
    # See https://github.com/include-what-you-use/include-what-you-use/issues/815
    #
    # NOTE: Zephyr doest not fully adhere to an include-what-you-use policy yet
    #       See https://github.com/zephyrproject-rtos/zephyr/issues/41543
    #
    # NOTE: When CMake invokes include-what-you-use it ignores any error return codes, and only prints output that
    #       contains "should remove..." or "should add....". So if there are any errors running IWYU, CMake prints
    #       nothing at all.
    #       See https://stackoverflow.com/a/77249518
    #       See https://gitlab.kitware.com/cmake/cmake/-/issues/19706
    #
    set(command "${WINDMILL_COMMAND_LINTER}")
    if (EXISTS "${WINDMILL_IWYU_WRAPPER_CONFIG_FILE}")
        list(APPEND command "--config-file=${WINDMILL_IWYU_WRAPPER_CONFIG_FILE}")
    else ()
        message(AUTHOR_WARNING "Could NOT find WINDMILL_IWYU_WRAPPER_CONFIG_FILE"
                " using file: \"${WINDMILL_IWYU_WRAPPER_CONFIG_FILE}\")")
    endif ()
    list(APPEND command
            "${IWYU_EXECUTABLE}"
            --
            # Disable Clang warnings
            # FIXME: Some warnings may still be produced depending on the diagnostic flags used by the configured
            #        compiler because Clang may re-enable certain diagnostics which are more specific members of a group
            #        when that group's diagnostics are enabled.
            #        See https://github.com/llvm/llvm-project/issues/63315
            -w
            # Do not suggest that a file add foo.h unless foo.h is already visible in the file's transitive includes.
            -Xiwyu --transitive_includes_only
            # Suggests the more concise syntax introduced in C++17
            -Xiwyu --cxx17ns
            # Do not use forward declarations.
            -Xiwyu --no_fwd_decls
    )

    # In case of warnings as errors, exit with error 1 for any violation.
    if (WINDMILL_IWYU_WARNING_AS_ERROR)
        list(APPEND command -Xiwyu --error)
    endif ()

    # Include the custom mapping file for the target system.
    if (EXISTS "${WINDMILL_IWYU_MAPPING_FILE}")
        list(APPEND command -Xiwyu "--mapping_file=${WINDMILL_IWYU_MAPPING_FILE}"
        )
    else ()
        message(STATUS "Could NOT find WINDMILL_IWYU_MAPPING_FILE"
                " using file: \"${WINDMILL_IWYU_MAPPING_FILE}\")")
    endif ()

    # Adjustments for GCC compatibility
    #
    # NOTE: There is no use in trying to pass -fgnuc-version=${CMAKE_C_COMPILER_VERSION}" because Clang has only
    #       partial support to GNU extensions and lack many recent ones. For example, GCC 11 introduced three
    #       forms of the __malloc__ attribute:
    #
    #           - __malloc__
    #           - __malloc__(deallocator)
    #           - __malloc__(deallocator, ptr-index)
    #
    #       But Clang 17 (and earlier) only supports the first. For better compatibility, let Clang decide which GNUC
    #       version to report.
    if ("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
        # The Clang backend of IWYU needs an explict target when cross compiling.
        if (CMAKE_CROSSCOMPILING)
            execute_process(
                    COMMAND "${CMAKE_C_COMPILER}" -dumpmachine
                    OUTPUT_VARIABLE triplet
                    OUTPUT_STRIP_TRAILING_WHITESPACE
                    COMMAND_ERROR_IS_FATAL ANY
            )
            list(APPEND command "--target=${triplet}")
            unset(triplet)

            if ("${CMAKE_SYSTEM_NAME}" STREQUAL "Zephyr")
                if (NOT CONFIG_PICOLIBC_USE_MODULE)
                    # Picolibc provides a spec file for use with gcc but clang does not support spec files and simply
                    # ignores the argument so we have to provide that information directly here. Zephyr SDK ships the
                    # spec file at ${SYSROOT_DIR}\lib\picolibc.specs but we cannot effectively parse it since it depends
                    # on the values of custom gcc params -picolib-prefix and -picolibc-buildtype. Besides, other
                    # toolchains might require different adjustments. For now, only the Zephyr SDK is supported for
                    # which we know the include paths to add.
                    # See https://releases.llvm.org/17.0.1/tools/clang/docs/DriverInternals.html#relation-to-gcc-driver-concepts
                    list(APPEND command
                            "--extra-arg=-isystem"
                            "--extra-arg=${TOOLCHAIN_HOME}/${SYSROOT_TARGET}/picolibc/include"
                    )
                endif ()
            endif ()
        endif ()
    endif ()

    # Include headers to keep
    list(APPEND command
            -Xiwyu "--keep=${WINDMILL_CONFIG_H}"
    )
    if ("${CMAKE_SYSTEM_NAME}" STREQUAL "Zephyr")
        list(APPEND command
                -Xiwyu "--keep=${AUTOCONF_H}"
                -Xiwyu "--keep=${DEVICETREE_GENERATED_H}"
        )
    endif ()

    foreach (lang IN ITEMS C CXX)
        if (NOT CMAKE_${lang}_INCLUDE_WHAT_YOU_USE)
            set(CMAKE_${lang}_INCLUDE_WHAT_YOU_USE "${command}")
        endif ()
    endforeach ()
    unset(command)
endif ()
